/**
 * test two value: x, y if equal, and throw errorMessage if not
 */
function assertEqual(x, y, errorMessage = 'Test Case Failed!') {
  if (
    x === y ||
    (typeof x === 'object' &&
      typeof y === 'object' &&
      x.length === y.length &&
      x.every((element, index) => element === y[index]))
  ) {
    return;
  } else {
    throw new Error(errorMessage);
  }
}

function assertTrue(x) {
  assertEqual(x, true);
}

function assertFalse(x) {
  assertEqual(x, false);
}

// == remember drawing result for test case use ==
const funTracer = [];
const circleRadius = [];
const lineYpos = [];


// base functions hidden from user ... but need to be included for client side running & testing
console.log('## this is a challenge code base ...');

// this is the real size of canvas element in `GM`
const canvasWidth = 440;
const conavasHeight = 378;

const canvas = document.getElementById("codePresenter");
const ctx = canvas.getContext("2d");

ctx.fillStyle = "yellow";
ctx.strokeStyle = "red";
ctx.lineWidth = 4;

function clearCanvas() {
  ctx.clearRect(0, 0, 450, 450);
} 

function drawCircle(startX, startY, radius, fillStyle = '#e0edf9', strokeStyle = '#009ad6') {
  if (fillStyle) {
    ctx.fillStyle = fillStyle;
  }
  if (strokeStyle) {
    ctx.strokeStyle = strokeStyle;
  }

  ctx.beginPath();
  ctx.arc(startX, startY, radius, 0, 2 * Math.PI);
  ctx.stroke();
  ctx.fill();

  funTracer.push('C');
  circleRadius.push(radius);
}

function drawLine(startX, startY, endX, endY, strokeStyle = 'red', lineWidth = 8) {
  ctx.beginPath();
  ctx.lineWidth = lineWidth;
  ctx.strokeStyle = strokeStyle;
  ctx.moveTo(startX, startY);
  ctx.lineTo(endX, endY);
  ctx.stroke();

  funTracer.push('L');
  lineYpos.push(startY, endY);
}

clearCanvas();