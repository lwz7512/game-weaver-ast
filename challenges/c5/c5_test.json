[
  {
    "description": "paintHammerDown should be used while mouse is down",
    "comment": "test mouseViewPainter function after mockMouseDown has called ",
    "validator": [
      "() => {",
      "  triggerMouseDown(); // mock mouse down to update `isMouseDown`",
      "  window.mouseViewPainter(); // invoke `paintHammerDown` to set `mockHammerDrawState` ",
      "  return mockHammerDrawState;",
      "}"
    ],
    "params": [],
    "expectation": 1
  },
  {
    "description": "paintHammerUp should be used while mouse is up",
    "comment": "test mouseViewPainter function after mockMouseDown has called ",
    "validator": [
      "() => {",
      "  triggerMouseUp(); // mock mouse up to update `isMouseDown`",
      "  window.mouseViewPainter(); // invoke `paintHammerUp` to set `mockHammerDrawState` ",
      "  return mockHammerDrawState;",
      "}"
    ],
    "params": [],
    "expectation": 0
  },
  {
    "description": "paintHammerUp arguments should use `hammerX` and `hammerY` ",
    "comment": "test `currentMouseX` and `currentMouseY` if assigned by `paintHammerUp` ",
    "validator": [
      "() => {",
      "  const mouseXAssigned = currentMouseX < 0; ",
      "  const mouseYAssigned = currentMouseY < 0; ",
      "  return mouseXAssigned && mouseYAssigned;",
      "}"
    ],
    "params": [],
    "expectation": true
  }
]
