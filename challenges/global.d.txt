// global function declarations

/**
 * For Challenge 1:
 * Draw a cirle by assign position, size and styles. 
 * Origin(0,0) of coordinate system is in top left.
 * 
 * @param startX circle center point horizontal coordinate
 * @param startY cirlce center point vertical coordinate
 * @param radius circle size
 * @param fillStyle circle fill color, color name such as `red`, or hex color value suche as `#FF0000`
 * 
 * @returns void
 */    
declare function drawCircle(startX: number, startY: number, radius: number, fillStyle?: string, strokeStyle?: string): void;

/**
 * For Challenge 1:
 * Draw a straght line by assign starting point, and end point.
 * if you want, you can also assign stroke color and width.
 * 
 * @param startX line starting point horizontal coordinate
 * @param startY line starting point vertical coordinate
 * @param endX line end point horizontal coordinate
 * @param endYX line end point horizontal coordinate
 * @param strokeStyle stroke color, `red` by default
 * @param lineWidth line thickness, `8` pixels by default
 * 
 * @returns void
 */
declare function drawLine(startX: number, startY: number, endX: number, endY: number, strokeStyle = 'red', lineWidth = 8): void;


/**
 * For Challenge 3:
 * Draw a mole with its hole, with posX, posY. 
 * If want mole grow more out of burrow, set `position` value. 
 *
 * @param posX mole start point hori-coordinate.
 * @param posY mole start point verti-coordinate.
 * @param position mole body height above its burrow, range from 0 to 45, 0 by default.
 *
 * @returns void
 */
declare function drawMoleHoleWithDynaHead(posX: number, posY: number, position = 0): void;


/**
 * For Challenge 4:
 * Repaint in frames to achieve animation
 *
 * @param startX dropping starting point in horizontal
 * @param startY dropping starting point in vertical
 * @param step dropping speed
 */
 declare function animatedBall(startX: number, startY: number, step: number): void;


/**
 * For Challenge 4:
 * Draw sky background and grassland
 */
declare function drawSkyAndGrassland(): void;


/**
 * For Challenge 4:
 * Draw sky background and grassland
 *
 * @param posX starting point in horizontal
 * @param posY starting point in vertical
 * @param position mole body height
 */
declare function drawMoleHoleWithDynaHead(posX: number, posY: number, position: number): void;

/**
 * For Challenge 4:
 * start game with paint function
 * 
 */
declare function startGame(paint: ()=>void): void;

/**
 * For Challenge 5:
 * start game with cursor support
 */
declare function startGameWithCursor(cursor: (ctx: CanvasRenderingContext2D)=>void): void;

/**
 * Print some message or values onto tips panel. 
 * `string` or `number` prefered.
 */
declare function log(message: string | number): void;

/**
 * Game main scene logic
 */
declare function paintMainScene(): void;

/**
 * Get canvas position to calculate the offset of global mouse position
 */
declare function getCanvasPosition(): {x:number, y:number};

/**
 * Paint hammer normal state
 */
declare function paintHammerUp(ctx: CanvasRenderingContext2D, hammerX: number, hammerY: number): void;

/**
 * Paint hammer down(pressed) state
 */
declare function paintHammerDown(ctx: CanvasRenderingContext2D, hammerX: number, hammerY: number): void;

/**
 * Start game with `Mole` state class that implement `checkCollistion` function
 */
 declare function buildWhacMoleGame(MoleClass: SimpleMoleState): void;